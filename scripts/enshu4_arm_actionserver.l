#!/usr/bin/env roseus
(load "package://dxl_armed_turtlebot/euslisp/dxl-armed-turtlebot-interface.l")
(load "package://pr2eus/robot-interface.l")
(load "package://roseus/euslisp/actionlib.l")
(ros::roseus-add-msgs "geometry_msgs")
(ros::roseus-add-msgs "std_msgs")
(ros::roseus-add-msgs "final_assignment_msgs")

(ros::roseus "arm_server")

(dxl-armed-turtlebot-init)
(send *dxl-armed-turtlebot* :reset-pose2)
(send *irtviewer* :draw-objects)
(send *ri* :angle-vector (send *dxl-armed-turtlebot* :angle-vector) 3000)
(send *ri* :wait-interpolation)
(send *dxl-armed-turtlebot* :gripper :arm :angle-vector #f(50))
(send *ri* :stop-grasp)
(send *ri* :wait-interpolation)
(defun accb(server msg)
    (ros::ros-info "accb_called" )
    (ros::ros-info (format nil "Received goal: ~A ~A ~A"
    (send msg :goal :target :x) (send msg :goal :target :y) (send msg :goal :target :z)))
    (send server :execute-cb)
)
(defun prcb (server msg)
    (ros::ros-info "prcb_called" )
    (defparameter result (send server :result :finish nil))
    (send server :set-preempted result)
)
(defun excb (server msg)
    (ros::ros-info "excb_called" )
    (send *dxl-armed-turtlebot* :reset-pose)
    (send *irtviewer* :draw-objects)
    (send *ri* :angle-vector (send *dxl-armed-turtlebot* :angle-vector) 3000)
    (send *ri* :wait-interpolation)
    ;;(send *dxl-armed-turtlebot* :inverse-kinematics
    ;;(make-coords :pos (float-vector (- (send msg :goal :target :x) 20) (- (send msg :goal :target :y) 70) ( + (send msg :goal :target :z) 50))) :rotation-axis nil)
    
    (if (> (send msg :goal :grasp)  0)
    (progn
    (send *ri* :stop-grasp)
    (send *dxl-armed-turtlebot* :inverse-kinematics
    (make-coords :pos (float-vector (- (send msg :goal :target :x) 50) (send msg :goal :target :y) (send msg :goal :target :z)) :rpy (list 0 0 (deg2rad 180)))
    :debug-view :no-message)
    (send *ri* :angle-vector (send *dxl-armed-turtlebot* :angle-vector) 3000)
    (send *ri* :wait-interpolation)
    (send *dxl-armed-turtlebot* :rarm :move-end-pos (float-vector 100 0 50) :world :rotation-axis nil)
    (send *ri* :angle-vector (send *dxl-armed-turtlebot* :angle-vector) 3000)
    (send *ri* :wait-interpolation)
    (send *dxl-armed-turtlebot* :gripper :arm :angle-vector #f(50))
    (send *ri* :move-gripper 50)
    (send *ri* :start-grasp)
    (send *ri* :wait-interpolation)
    (send *dxl-armed-turtlebot* :reset-pose2)
    (send *irtviewer* :draw-objects)
    (send *ri* :angle-vector (send *dxl-armed-turtlebot* :angle-vector) 3000)
    (send *ri* :wait-interpolation)
    )
    (progn
    (send *dxl-armed-turtlebot* :inverse-kinematics
    (make-coords :pos (float-vector (- (send msg :goal :target :x) 50) (send msg :goal :target :y) (send msg :goal :target :z)) :rpy (list 0 0 (deg2rad 180)))
    :debug-view :no-message)
    (send *ri* :angle-vector (send *dxl-armed-turtlebot* :angle-vector) 3000)
    (send *ri* :wait-interpolation)
    (send *dxl-armed-turtlebot* :rarm :move-end-pos (float-vector 100 0 50) :world :rotation-axis nil)
    (send *ri* :angle-vector (send *dxl-armed-turtlebot* :angle-vector) 3000)
    (send *ri* :wait-interpolation)
    (send *dxl-armed-turtlebot* :gripper :arm :angle-vector #f(-50))
    (send *ri* :stop-grasp)
    (send *ri* :wait-interpolation)
    (send *dxl-armed-turtlebot* :reset-pose2)
    (send *irtviewer* :draw-objects)
    (send *ri* :angle-vector (send *dxl-armed-turtlebot* :angle-vector) 3000)
    (send *ri* :wait-interpolation)
    )
    )
    (defparameter result (send server :result :finish t))
    (send server :set-succeeded result)
)

(setq *s* (instance ros::simple-action-server :init "arm" final_assignment_msgs::enshu4_armAction
:execute-cb #'excb :preempt-cb #'prcb :accept-cb #'accb ))
(ros::ros-info "server_start" )
(do-until-key
(ros::spin-once)
)